{"version":3,"sources":["api/cars.ts","api/colors.ts","helpers.ts","App.tsx","index.tsx"],"names":["id","brand","rentPrice","colorId","name","getFullCar","carsFromServer","map","car","color","colorsFromServer","find","App","useState","cars","query","setQuery","selectedColorId","setSelectedColorId","visibleCars","filter","preparedQuery","toLowerCase","isBrandMatch","includes","isColorMatch","type","placeholder","value","onChange","event","target","disabled","style","ReactDOM","render","document","getElementById"],"mappings":"4NAAe,GACb,CACEA,GAAI,EAAGC,MAAO,OAAQC,UAAW,IAAKC,QAAS,GAEjD,CACEH,GAAI,EAAGC,MAAO,OAAQC,UAAW,IAAKC,QAAS,GAEjD,CACEH,GAAI,EAAGC,MAAO,UAAWC,UAAW,IAAKC,QAAS,GAEpD,CACEH,GAAI,EAAGC,MAAO,OAAQC,UAAW,GAAIC,QAAS,GAEhD,CACEH,GAAI,EAAGC,MAAO,SAAUC,UAAW,GAAIC,QAAS,GAElD,CACEH,GAAI,EAAGC,MAAO,OAAQC,UAAW,IAAKC,QAAS,GAEjD,CACEH,GAAI,EAAGC,MAAO,OAAQC,UAAW,IAAKC,QAAS,GAEjD,CACEH,GAAI,EAAGC,MAAO,OAAQC,UAAW,GAAIC,QAAS,GAEhD,CACEH,GAAI,EAAGC,MAAO,OAAQC,UAAW,IAAKC,QAAS,GAEjD,CACEH,GAAI,GAAIC,MAAO,OAAQC,UAAW,IAAKC,QAAS,GAElD,CACEH,GAAI,GAAIC,MAAO,aAAcC,UAAW,IAAKC,QAAS,IChC3C,GACb,CAAEH,GAAI,EAAGI,KAAM,SACf,CAAEJ,GAAI,EAAGI,KAAM,SACf,CAAEJ,GAAI,EAAGI,KAAM,QCIJC,EAAa,WACxB,OAAOC,EAAeC,KAAI,SAAAC,GAAG,kCACxBA,GADwB,IAE3BC,OAPyBN,EAOLK,EAAIL,QAN1BO,EAAiBC,MAAK,SAAAF,GAAK,OAAIA,EAAMT,KAAOG,QADlB,IAACA,M,OCKhBS,EAAgB,WAC3B,MAAeC,mBAASR,GAAjBS,EAAP,oBACA,EAA0BD,mBAAS,IAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAA8CH,mBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EAAcL,EAAKM,QAAO,SAAAZ,GAAQ,IAAD,EAC/Ba,EAAgBN,EAAMO,cACtBC,EAAef,EAAIP,MAAMqB,cAAcE,SAASH,GAEhDI,GAAeR,GACjBA,KAAe,UAAKT,EAAIC,aAAT,aAAK,EAAWT,IAGnC,OAAOuB,GAAgBE,KAGzB,OACE,gCACE,uBACEC,KAAK,SACLC,YAAY,oBACZC,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAWd,EAASc,EAAMC,OAAOH,UAG7C,yBACEA,MAAOX,EACPY,SAAU,SAACC,GACTZ,GAAoBY,EAAMC,OAAOH,QAHrC,UAME,wBAAQA,MAAO,EAAGI,UAAQ,EAA1B,2BAECtB,EAAiBH,KAAI,SAAAE,GAAK,OACzB,wBAAQmB,MAAOnB,EAAMT,GAArB,SACGS,EAAML,MADqBK,EAAMT,UAMxC,kCACE,gCACE,+BACE,oCACA,uCACA,uCACA,iDAGJ,gCACGmB,EAAYZ,KAAI,SAAAC,GAAG,aAClB,+BACE,6BAAKA,EAAIR,KACT,6BAAKQ,EAAIP,QACT,oBAAIgC,MAAO,CAAExB,MAAO,OAApB,mBAA8BD,EAAIC,aAAlC,aAA8B,EAAWL,OACzC,6BAAKI,EAAIN,cAJFM,EAAIR,gB,MCtDzBkC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4ab97b74.chunk.js","sourcesContent":["export default [\n  {\n    id: 1, brand: 'Audi', rentPrice: 100, colorId: 1,\n  },\n  {\n    id: 2, brand: 'Audi', rentPrice: 100, colorId: 2,\n  },\n  {\n    id: 3, brand: 'Ferarri', rentPrice: 500, colorId: 3,\n  },\n  {\n    id: 4, brand: 'Ford', rentPrice: 80, colorId: 1,\n  },\n  {\n    id: 5, brand: 'Peugot', rentPrice: 50, colorId: 1,\n  },\n  {\n    id: 6, brand: 'Ford', rentPrice: 150, colorId: 1,\n  },\n  {\n    id: 7, brand: 'Ford', rentPrice: 140, colorId: 2,\n  },\n  {\n    id: 8, brand: 'Lada', rentPrice: 20, colorId: 3,\n  },\n  {\n    id: 9, brand: 'Opel', rentPrice: 100, colorId: 1,\n  },\n  {\n    id: 10, brand: 'Opel', rentPrice: 100, colorId: 2,\n  },\n  {\n    id: 11, brand: 'Mitsubishi', rentPrice: 300, colorId: 1,\n  },\n];\n","export default [\n  { id: 1, name: 'white' },\n  { id: 2, name: 'black' },\n  { id: 3, name: 'red' },\n];\n","import carsFromServer from './api/cars';\nimport colorsFromServer from './api/colors';\n\nexport const getColorById = (colorId: number) => (\n  colorsFromServer.find(color => color.id === colorId)\n);\n\nexport const getFullCar = () => {\n  return carsFromServer.map(car => ({\n    ...car,\n    color: getColorById(car.colorId),\n  }));\n};\n","import React, { useState } from 'react';\nimport { getFullCar } from './helpers';\nimport colorsFromServer from './api/colors';\n\n// 1. Render car with color\n// 2. Add ability to filter car by brand name\n// 3. Add ability to filter car by color\n\nexport const App: React.FC = () => {\n  const [cars] = useState(getFullCar);\n  const [query, setQuery] = useState('');\n  const [selectedColorId, setSelectedColorId] = useState(0);\n\n  const visibleCars = cars.filter(car => {\n    const preparedQuery = query.toLowerCase();\n    const isBrandMatch = car.brand.toLowerCase().includes(preparedQuery);\n\n    const isColorMatch = selectedColorId\n      ? selectedColorId === car.color?.id\n      : true;\n\n    return isBrandMatch && isColorMatch;\n  });\n\n  return (\n    <div>\n      <input\n        type=\"search\"\n        placeholder=\"Find by car brand\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n\n      <select\n        value={selectedColorId}\n        onChange={(event) => {\n          setSelectedColorId(+event.target.value);\n        }}\n      >\n        <option value={0} disabled>Chose a color</option>\n\n        {colorsFromServer.map(color => (\n          <option value={color.id} key={color.id}>\n            {color.name}\n          </option>\n        ))}\n      </select>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Brand</th>\n            <th>Color</th>\n            <th>Rent price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {visibleCars.map(car => (\n            <tr key={car.id}>\n              <td>{car.id}</td>\n              <td>{car.brand}</td>\n              <td style={{ color: 'red' }}>{car.color?.name}</td>\n              <td>{car.rentPrice}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}